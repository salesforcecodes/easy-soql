{"version":3,"sources":["services/salesforce.js","features/authSlice.js","theme.js","styles.js","config.js","components/Authenticate.js","features/soqlBuilderSlice.js","components/ResultTable.js","components/QueryBuilder.js","App.js","utils.js","store.js","index.js"],"names":["_connection","init","loginInfo","jsforce","Connection","instanceUrl","instance_url","accessToken","access_token","sf","getUserInfo","userId","Promise","resolve","reject","query","err","result","console","log","name","JSON","stringify","getObjects","a","describeGlobal","res","QueryHook","queryString","useState","setResult","loading","setLoading","error","setError","useEffect","response","message","totalSize","done","records","createAsyncThunk","payload","thunkAPI","creds","getState","auth","activeLogin","idSegments","id","split","length","userObj","corsBody","url","token","fetch","method","body","headers","Error","authSlice","createSlice","initialState","logins","isConnecting","reducers","addLogin","state","action","push","removeLogin","filter","login","selectLogin","extraReducers","pending","fulfilled","userRecord","Id","email","Email","Name","rejected","actions","theme","createMuiTheme","palette","useStyles","makeStyles","container","backgroundColor","background","paper","padding","spacing","headerTitle","flexGrow","logo","margin","marginButton","queryBuilder","width","fontSize","queryAnimation","config","clientId","redirectUri","window","location","href","includes","origin","CUSTOM_URL_MSG","Authenticate","generateUrl","baseUrl","envType","setEnvType","setCustomUrl","calcUrl","setCalcUrl","loginUrl","setLoginUrl","Container","Typography","variant","align","color","gutterBottom","paragraph","Grid","justify","direction","alignItems","item","FormControl","component","FormLabel","RadioGroup","aria-label","value","onChange","e","selectedType","target","FormControlLabel","control","Radio","label","TextField","placeholder","required","urlValue","replace","Button","onClick","alert","soqlBuilderSlice","increment","decrement","incrementByAmount","ResultTable","fields","columns","rows","queryParts","i","trim","map","field","headerName","obj","rowObj","attributes","style","height","Paper","pageSize","QueryBuilder","input","setInput","setQuery","classes","useSelector","soqlBuilder","useDispatch","xs","TextareaAutosize","rowsMin","className","Skeleton","animation","Alert","severity","AlertTitle","App","anchorEl","setAnchorEl","open","Boolean","dispatch","handleClose","hashParms","hash","substr","reduce","parts","decodeURIComponent","getHashParms","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Search","IconButton","aria-controls","aria-haspopup","event","currentTarget","AccountCircle","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","configureStore","reducer","soqlReducer","authReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.9275d13d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport jsforce from 'jsforce';\n\nlet _connection = null;\n\nconst init = (loginInfo) => {\n    _connection = new jsforce.Connection({\n        instanceUrl: loginInfo.instance_url,\n        accessToken: loginInfo.access_token\n    });\n    // _connection.query(`SELECT Id, Name, Email FROM User WHERE Id = '${loginInfo.id.split('/')[loginInfo.id.split('/').length - 1]}'`, (err, result) => {\n    //     if (err) { return console.log('@@@', err.name === 'ERROR_HTTP_400', JSON.stringify(err), err); }\n    //     console.log(result);\n    // });\n}\n\nconst getUserInfo = (loginInfo, userId) => {\n    return new Promise((resolve, reject) => {\n        init(loginInfo);\n        _connection.query(`SELECT Id, Name, Email FROM User WHERE Id = '${userId}'`, (err, result) => {\n            if (err) {\n                console.log('@@@', err.name === 'ERROR_HTTP_400', JSON.stringify(err), err);\n                reject(err);\n            }\n            resolve(result);\n        });\n    });\n}\n\nconst getObjects = async () => {\n    return new Promise((resolve, reject) => {\n        _connection.describeGlobal(function (err, res) {\n            if (err) {\n                reject(err);\n            }\n            console.log(res);\n            resolve(res);\n        });\n    });\n}\n\nconst QueryHook = (queryString) => {\n    const [result, setResult] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if (queryString) {\n            setLoading(true);\n            console.log('Querying', queryString);\n            _connection.query(queryString, function (err, response) {\n                setLoading(false)\n                if (err) {\n                    console.log(err.message, JSON.stringify(err), err);\n                    setError(err)\n                    setResult({ totalSize: 0, done: true, records: [] });\n                } else {\n                    setError('');\n                    console.log(response);\n                    setResult(response);\n                }\n            });\n        }\n    }, [queryString]);\n\n    return [result, loading, error];\n}\n\nconst sf = {\n    init,\n    getUserInfo,\n    getObjects,\n    QueryHook\n}\n\nexport default sf;","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport sf from '../services/salesforce';\n\nexport const getUserInfo = createAsyncThunk(\n    'auth/getUserInfo',\n    async (payload, thunkAPI) => {\n        let creds = thunkAPI.getState().auth.activeLogin;\n        if (creds) {\n            let idSegments = creds.id.split('/');\n            let userId = idSegments[idSegments.length - 1];\n            let userObj;\n            try {\n                userObj = await sf.getUserInfo(creds, userId);\n            } catch (err) {\n                //If CORS error trying to deploy CORS settings and retrying\n                if (err.name === 'ERROR_HTTP_400') {\n                    let corsBody = { url: creds.instance_url, token: creds.access_token };\n                    let deployResult = await fetch('https://sfwizard.herokuapp.com/api/deploy/salesforceCodesCors',\n                        {\n                            method: \"POST\",\n                            body: JSON.stringify(corsBody),\n                            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n                        });\n                    userObj = await sf.getUserInfo(creds, userId);\n                }\n            }\n            return userObj;\n        } else {\n            throw Error('No active login');\n        }\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState: {\n        logins: [],\n        activeLogin: null,\n        isConnecting: false,\n    },\n    reducers: {\n        addLogin: (state, action) => {\n            state.logins.push(action.payload);\n            state.activeLogin = action.payload;\n            console.log(JSON.stringify(state));\n        },\n        removeLogin: (state, action) => {\n            state.logins = state.logins.filter(login => login.id !== action.payload);\n            if (state.activeLogin && state.activeLogin.id === action.payload) {\n                state.activeLogin = null;\n            }\n        },\n        selectLogin: (state, action) => {\n            state.activeLogin = state.logins.filter(login => login.id === action.payload)[0];\n        }\n    },\n    extraReducers: {\n        [getUserInfo.pending]: (state, action) => {\n            state.isConnecting = true;\n        },\n        [getUserInfo.fulfilled]: (state, { payload }) => {\n            if (payload.done) {\n                let userRecord = payload.records[0];\n                console.log('success',);\n                state.activeLogin.userId = userRecord.Id;\n                state.activeLogin.email = userRecord.Email;\n                state.activeLogin.name = userRecord.Name;\n                state.isConnecting = false;\n            }\n        },\n        [getUserInfo.rejected]: (state, { payload }) => {\n            state.isConnecting = false;\n        }\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const { addLogin, removeLogin, selectLogin } = authSlice.actions;\n\nexport default authSlice.reducer;","import { orange } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        // primary: {\n        //     main: orange[500],\n        // }\n    }\n})\n\nexport default theme;","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(8, 0, 6)\n    },\n    headerTitle: {\n        flexGrow: 1\n    },\n    logo: {\n        margin: '0 1em'\n    },\n    marginButton: {\n        margin: theme.spacing(1)\n    },\n    queryBuilder: {\n        width: '100%',\n        fontSize: '2em'\n    },\n    queryAnimation: {\n        width: '100%'\n    }\n}));\n\nexport default useStyles;","const config = {\n    clientId: \"3MVG9Nk1FpUrSQHfKNnaUF1dVrBEebKXe8t9H.kyVVrVqQ9Ccvq7B4ay2EjXuj0.P_UjHlH7F1h7TonXqOy_p\",\n    redirectUri: window.location.href.includes('localhost') ? window.location.origin : window.location.href\n};\nexport default config;","import { useState } from 'react';\nimport { Button, Typography, Grid, Container, FormControl, Radio, RadioGroup, FormLabel, FormControlLabel, TextField } from '@material-ui/core';\nimport config from '../config';\nconst CUSTOM_URL_MSG = 'Please enter a value';\n\nfunction Authenticate() {\n    const generateUrl = (baseUrl) => (`${baseUrl}/services/oauth2/authorize?response_type=token&client_id=${config.clientId}&redirect_uri=${config.redirectUri}`);\n    const [envType, setEnvType] = useState('login');\n    const [customUrl, setCustomUrl] = useState('');\n    const [calcUrl, setCalcUrl] = useState('');\n    const [loginUrl, setLoginUrl] = useState(generateUrl('https://login.salesforce.com'));\n\n    const handleEnvChange = (e) => {\n        const selectedType = e.target.value;\n        setEnvType(selectedType);\n        setCalcUrl('');\n        if (selectedType === 'login') {\n            setLoginUrl(generateUrl('https://login.salesforce.com'));\n        } else if (selectedType === 'test') {\n            setLoginUrl(generateUrl('https://test.salesforce.com'));\n        }\n    }\n    const customUrlChange = (e) => {\n        let urlValue = e.target.value;\n        setCustomUrl(urlValue);\n\n        if (urlValue) {\n            urlValue = urlValue\n                .replace(/^(https:\\/\\/)/, '')\n                .replace(/^(http:\\/\\/)/, '')\n                .replace(/^(http:)/, '')\n                .replace(/^(http)/, '')\n                .replace(/^(htt)/, '')\n                .replace(/^(www\\.)/, '')\n            if (urlValue.includes('.')) {\n                urlValue = urlValue.split('.')[0];\n            }\n            setLoginUrl(generateUrl(`https://${urlValue}.my.salesforce.com`));\n            setCalcUrl(`https://${urlValue}.my.salesforce.com`);\n        } else {\n            setCalcUrl(CUSTOM_URL_MSG);\n        }\n    }\n\n    const startOAuth = () => {\n        if (envType === 'custom' && (!calcUrl || calcUrl === CUSTOM_URL_MSG)) {\n            alert('Please enter a domain name');\n        } else {\n            window.location.href = loginUrl;\n        }\n    }\n\n    return (\n        <Container>\n            <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                Easy SOQL\n            </Typography>\n            <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n                Easily build SOQL queries against your Salesforce environments\n            </Typography>\n            <br />\n            <div>\n                <Grid container justify=\"center\" direction=\"column\" alignItems=\"center\">\n                    <Grid item>\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Type of environment</FormLabel>\n                            <RadioGroup aria-label=\"envType\" name=\"envType\" value={envType} onChange={handleEnvChange}>\n                                <FormControlLabel value=\"login\" control={<Radio />} label=\"Production/Developer\" />\n                                <FormControlLabel value=\"test\" control={<Radio />} label=\"Sandbox\" />\n                                <FormControlLabel value=\"custom\" control={<Radio />} label=\"Custom URL\" />\n                            </RadioGroup>\n                            {envType === 'custom' &&\n                                <>\n                                    <TextField variant=\"standard\" placeholder=\"Domain URL here..\" required={true} onChange={customUrlChange} />\n                                    {calcUrl}\n                                </>\n                            }\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <br />\n                        <Button onClick={startOAuth} variant=\"contained\">\n                            Login\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        </Container>\n    )\n}\n\nexport default Authenticate;","import { createSlice } from '@reduxjs/toolkit'\n\nexport const soqlBuilderSlice = createSlice({\n    name: 'soqlBuilder',\n    initialState: {\n        value: 0\n    },\n    reducers: {\n        increment: state => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1\n        },\n        decrement: state => {\n            state.value -= 1\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n        }\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = soqlBuilderSlice.actions;\n\nexport default soqlBuilderSlice.reducer;","import { DataGrid } from '@material-ui/data-grid';\nimport { Paper } from '@material-ui/core';\n\nfunction ResultTable({ result, query }) {\n    const fields = [];\n    let columns = [];\n    let rows = [];\n    if (query && result && result.records) {\n        let queryParts = query.split(',');\n        for (let i = 0; i < queryParts.length; i++) {\n            if (i === 0) {\n                fields.push(queryParts[i].trim().split(' ')[queryParts[i].split(' ').length - 1].trim());\n            } else {\n                fields.push(queryParts[i].trim().split(' ')[0].trim());\n            }\n        }\n        columns = fields.map(field => ({ field: field, headerName: field, width: 200 }));\n        rows = result.records.map((obj, i) => {\n            let rowObj = obj;\n            delete rowObj.attributes;\n            rowObj.id = i;\n            return rowObj;\n        })\n    }\n    // const classes = useStyles();\n\n\n    return (\n        <div style={{ height: 700, width: '100%' }}>\n            {result.totalSize > 0 && <p>Total {result.totalSize} records </p>}\n            <Paper style={{ height: 700, width: '100%' }}>\n                <DataGrid rows={rows} columns={columns} pageSize={10} />\n            </Paper>\n        </div>\n    )\n}\n\n\nexport default ResultTable;","import { useState, useEffect } from 'react';\nimport { TextareaAutosize, Container, Grid, Button, Typography } from '@material-ui/core';\nimport { Alert, AlertTitle, Skeleton } from '@material-ui/lab';\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { decrement, increment } from '../features/soqlBuilderSlice';\nimport sf from '../services/salesforce'\nimport useStyles from '../styles';\nimport ResultTable from './ResultTable';\n\nfunction QueryBuilder({ activeLogin }) {\n    const [input, setInput] = useState('SELECT Id, Name FROM Account LIMIT 10');\n    const [query, setQuery] = useState('');\n    const [result, loading, error] = sf.QueryHook(query);\n    const count = useSelector(state => state.soqlBuilder.value);\n    const dispatch = useDispatch()\n\n    const classes = useStyles();\n    return (\n        <Container>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" align=\"left\" color=\"textSecondary\" paragraph>\n                        Type your query below\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextareaAutosize aria-label=\"minimum height\" onChange={e => setInput(e.target.value)} value={input} rowsMin={10} placeholder=\"Query here\" className={classes.queryBuilder} />\n                </Grid>\n                <Grid item xs={12}>\n                    <Button onClick={e => { setQuery(input) }} variant=\"contained\" color=\"primary\" className={classes.marginButton}>\n                        Execute Query\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" className={classes.marginButton}>\n                        Format Query\n                    </Button>\n                    <Button onClick={e => { setInput('') }} variant=\"outlined\" color=\"secondary\" className={classes.marginButton}>\n                        Clear\n                    </Button>\n                </Grid>\n                {query &&\n                    <Grid item xs={12}>\n                        <br />\n                        {loading &&\n                            <div className={classes.queryAnimation}>\n                                <Skeleton />\n                                <Skeleton animation={false} />\n                                <Skeleton animation=\"wave\" />\n                                <Skeleton />\n                                <Skeleton animation={false} />\n                                <Skeleton animation=\"wave\" />\n                            </div>\n                        }\n                        {!loading && error &&\n                            <Alert severity=\"error\">\n                                <AlertTitle>{error.name}</AlertTitle>\n                                <strong>{error.message}</strong>\n                            </Alert>\n                        }\n                        {!loading && !error && <ResultTable result={result} query={query} />}\n                    </Grid>\n                }\n            </Grid>\n        </Container>\n    )\n}\n\n\nexport default QueryBuilder;","import { useState, useEffect } from 'react';\nimport { Button, Typography, AppBar, Card, CardActions, CardContent, CssBaseline, Grid, Toolbar, Container, Menu, MenuItem, IconButton } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Search, AccountCircle } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserInfo, addLogin } from './features/authSlice';\n\nimport './App.css';\nimport theme from './theme';\nimport useStyles from './styles';\nimport { getHashParms } from './utils';\nimport sf from './services/salesforce'\nimport Authenticate from './components/Authenticate';\nimport QueryBuilder from './components/QueryBuilder';\n\nfunction App() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const dispatch = useDispatch();\n  const activeLogin = useSelector(state => state.auth.activeLogin);\n  console.log('$$$', activeLogin);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    let hashParms = getHashParms();\n    console.log(hashParms);\n    if (hashParms && hashParms.access_token) {\n      dispatch(addLogin(hashParms));\n      dispatch(getUserInfo());\n    }\n  }, [dispatch]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Search className={classes.logo} />\n          <Typography variant=\"h6\" className={classes.headerTitle}>Easy SOQL</Typography>\n          {activeLogin && (\n            <div>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleClose}>{activeLogin.name}</MenuItem>\n                <MenuItem onClick={handleClose}>{activeLogin.instance_url}</MenuItem>\n                <MenuItem onClick={handleClose}>Logout</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n      <main>\n        <div>\n          {!activeLogin &&\n            <Authenticate></Authenticate>\n          }\n          {activeLogin &&\n            <QueryBuilder></QueryBuilder>\n          }\n        </div>\n      </main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const getHashParms = () => {\n    let result = {};\n    let hash = window.location.hash;\n    if (hash && hash.length > 1) {\n        hash = hash.substr(1);\n        result = hash.split('&').reduce(function (res, item) {\n            var parts = item.split('=');\n            res[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n            return res;\n        }, {});\n    }\n    return result;\n}\n\nexport {\n    getHashParms,\n\n}","import { configureStore } from '@reduxjs/toolkit';\nimport soqlReducer from './features/soqlBuilderSlice';\nimport authReducer from './features/authSlice';\n\nexport default configureStore({\n    reducer: {\n        soqlBuilder: soqlReducer,\n        auth: authReducer,\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}