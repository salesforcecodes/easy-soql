{"version":3,"sources":["theme.js","styles.js","services/salesforce.js","config.js","components/Authenticate.js","components/ResultTable.js","components/QueryBuilder.js","App.js","utils.js","index.js"],"names":["theme","createMuiTheme","palette","useStyles","makeStyles","container","backgroundColor","background","paper","padding","spacing","logo","margin","marginButton","queryBuilder","width","fontSize","queryAnimation","_connection","sf","init","loginInfo","jsforce","Connection","instanceUrl","instance_url","accessToken","access_token","getObjects","a","Promise","resolve","reject","describeGlobal","err","res","console","log","QueryHook","queryString","useState","result","setResult","loading","setLoading","error","setError","useEffect","query","response","message","JSON","stringify","totalSize","done","records","config","clientId","redirectUri","window","location","href","includes","origin","CUSTOM_URL_MSG","Authenticate","generateUrl","baseUrl","envType","setEnvType","setCustomUrl","calcUrl","setCalcUrl","loginUrl","setLoginUrl","Container","Typography","variant","align","color","gutterBottom","paragraph","Grid","justify","direction","alignItems","item","FormControl","component","FormLabel","RadioGroup","aria-label","name","value","onChange","e","selectedType","target","FormControlLabel","control","Radio","label","TextField","placeholder","required","urlValue","replace","split","Button","onClick","alert","ResultTable","fields","columns","rows","queryParts","i","length","push","trim","map","field","headerName","obj","rowObj","attributes","id","style","height","pageSize","QueryBuilder","input","setInput","setQuery","classes","xs","TextareaAutosize","rowsMin","className","Skeleton","animation","Alert","severity","AlertTitle","App","isAuth","setIsAuth","hashParms","hash","substr","reduce","parts","decodeURIComponent","getHashParms","getInfo","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Search","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a560c2d.chunk.js","sourcesContent":["import { orange } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        // primary: {\n        //     main: orange[500],\n        // }\n    }\n})\n\nexport default theme;","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(8, 0, 6)\n    },\n    logo: {\n        margin: '0 1em'\n    },\n    marginButton: {\n        margin: theme.spacing(1)\n    },\n    queryBuilder: {\n        width: '100%',\n        fontSize: '2em'\n    },\n    queryAnimation: {\n        width: '100%'\n    }\n}));\n\nexport default useStyles;","import { useState, useEffect } from 'react';\nimport jsforce from 'jsforce';\n\nlet _connection = null;\nlet _loginInfo = null;\n\nconst init = (loginInfo) => {\n    _loginInfo = loginInfo\n    _connection = new jsforce.Connection({\n        instanceUrl: loginInfo.instance_url,\n        accessToken: loginInfo.access_token\n    });\n}\n\nconst getObjects = async () => {\n    return new Promise((resolve, reject) => {\n        _connection.describeGlobal(function (err, res) {\n            if (err) {\n                reject(err);\n            }\n            console.log(res);\n            resolve(res);\n        });\n    });\n}\n\nconst QueryHook = (queryString) => {\n    const [result, setResult] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if (queryString) {\n            setLoading(true);\n            console.log('Querying', queryString);\n            _connection.query(queryString, function (err, response) {\n                setLoading(false)\n                if (err) {\n                    console.log(err.message, JSON.stringify(err), err);\n                    setError(err)\n                    setResult({ totalSize: 0, done: true, records: [] });\n                } else {\n                    setError('');\n                    console.log(response);\n                    setResult(response);\n                }\n            });\n        }\n    }, [queryString]);\n\n    return [result, loading, error];\n}\n\nconst sf = {\n    init,\n    getObjects,\n    QueryHook\n}\n\nexport default sf;","const config = {\n    clientId: \"3MVG9Nk1FpUrSQHfKNnaUF1dVrBEebKXe8t9H.kyVVrVqQ9Ccvq7B4ay2EjXuj0.P_UjHlH7F1h7TonXqOy_p\",\n    redirectUri: window.location.href.includes('localhost') ? window.location.origin : window.location.href\n};\nexport default config;","import { useState } from 'react';\nimport { Button, Typography, Grid, Container, FormControl, Radio, RadioGroup, FormLabel, FormControlLabel, TextField } from '@material-ui/core';\nimport config from '../config';\nconst CUSTOM_URL_MSG = 'Please enter a value';\n\nfunction Authenticate() {\n    const generateUrl = (baseUrl) => (`${baseUrl}/services/oauth2/authorize?response_type=token&client_id=${config.clientId}&redirect_uri=${config.redirectUri}`);\n    const [envType, setEnvType] = useState('login');\n    const [customUrl, setCustomUrl] = useState('');\n    const [calcUrl, setCalcUrl] = useState('');\n    const [loginUrl, setLoginUrl] = useState(generateUrl('https://login.salesforce.com'));\n\n    const handleEnvChange = (e) => {\n        const selectedType = e.target.value;\n        setEnvType(selectedType);\n        setCalcUrl('');\n        if (selectedType === 'login') {\n            setLoginUrl(generateUrl('https://login.salesforce.com'));\n        } else if (selectedType === 'test') {\n            setLoginUrl(generateUrl('https://test.salesforce.com'));\n        }\n    }\n    const customUrlChange = (e) => {\n        let urlValue = e.target.value;\n        setCustomUrl(urlValue);\n\n        if (urlValue) {\n            urlValue = urlValue\n                .replace(/^(https:\\/\\/)/, '')\n                .replace(/^(http:\\/\\/)/, '')\n                .replace(/^(http:)/, '')\n                .replace(/^(http)/, '')\n                .replace(/^(htt)/, '')\n                .replace(/^(www\\.)/, '')\n            if (urlValue.includes('.')) {\n                urlValue = urlValue.split('.')[0];\n            }\n            setLoginUrl(generateUrl(`https://${urlValue}.my.salesforce.com`));\n            setCalcUrl(`https://${urlValue}.my.salesforce.com`);\n        } else {\n            setCalcUrl(CUSTOM_URL_MSG);\n        }\n    }\n\n    const startOAuth = () => {\n        if (envType === 'custom' && (!calcUrl || calcUrl === CUSTOM_URL_MSG)) {\n            alert('Please enter a domain name');\n        } else {\n            window.location.href = loginUrl;\n        }\n    }\n\n    return (\n        <Container>\n            <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                Easy SOQL\n            </Typography>\n            <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n                Easily build SOQL queries against your Salesforce environments\n            </Typography>\n            <br />\n            <div>\n                <Grid container justify=\"center\" direction=\"column\" alignItems=\"center\">\n                    <Grid item>\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Type of environment</FormLabel>\n                            <RadioGroup aria-label=\"envType\" name=\"envType\" value={envType} onChange={handleEnvChange}>\n                                <FormControlLabel value=\"login\" control={<Radio />} label=\"Production/Developer\" />\n                                <FormControlLabel value=\"test\" control={<Radio />} label=\"Sandbox\" />\n                                <FormControlLabel value=\"custom\" control={<Radio />} label=\"Custom URL\" />\n                            </RadioGroup>\n                            {envType === 'custom' &&\n                                <>\n                                    <TextField variant=\"standard\" placeholder=\"Domain URL here..\" required={true} onChange={customUrlChange} />\n                                    {calcUrl}\n                                </>\n                            }\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <br />\n                        <Button onClick={startOAuth} variant=\"contained\">\n                            Login\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        </Container>\n    )\n}\n\nexport default Authenticate;","import { DataGrid } from '@material-ui/data-grid';\n\nfunction ResultTable({ result, query }) {\n    const fields = [];\n    let columns = [];\n    let rows = [];\n    if (query && result && result.records) {\n        let queryParts = query.split(',');\n        for (let i = 0; i < queryParts.length; i++) {\n            if (i === 0) {\n                fields.push(queryParts[i].trim().split(' ')[queryParts[i].split(' ').length - 1].trim());\n            } else {\n                fields.push(queryParts[i].trim().split(' ')[0].trim());\n            }\n        }\n        columns = fields.map(field => ({ field: field, headerName: field, width: 200 }));\n        rows = result.records.map((obj, i) => {\n            let rowObj = obj;\n            delete rowObj.attributes;\n            rowObj.id = i;\n            return rowObj;\n        })\n    }\n    // const classes = useStyles();\n\n\n    return (\n        <div style={{ height: 700, width: '100%' }}>\n            {result.totalSize > 0 && <p>Total {result.totalSize} records </p>}\n            <DataGrid rows={rows} columns={columns} pageSize={10} />\n        </div>\n    )\n}\n\n\nexport default ResultTable;","import { useState, useEffect } from 'react';\nimport { TextareaAutosize, Container, Grid, Button, Typography } from '@material-ui/core';\nimport { Alert, AlertTitle, Skeleton } from '@material-ui/lab';\n\nimport sf from '../services/salesforce'\nimport useStyles from '../styles';\nimport ResultTable from './ResultTable';\n\nfunction QueryBuilder() {\n    const [input, setInput] = useState('SELECT Id, Name FROM Account LIMIT 10');\n    const [query, setQuery] = useState('');\n    const [result, loading, error] = sf.QueryHook(query);\n\n    const classes = useStyles();\n\n    return (\n        <Container>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\" align=\"left\" color=\"textSecondary\" paragraph>\n                        Type your query below\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextareaAutosize aria-label=\"minimum height\" onChange={e => setInput(e.target.value)} value={input} rowsMin={10} placeholder=\"Query here\" className={classes.queryBuilder} />\n                </Grid>\n                <Grid item xs={12}>\n                    <Button onClick={e => { setQuery(input) }} variant=\"contained\" color=\"primary\" className={classes.marginButton}>\n                        Execute Query\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" className={classes.marginButton}>\n                        Format Query\n                    </Button>\n                    <Button onClick={e => { setInput('') }} variant=\"outlined\" color=\"secondary\" className={classes.marginButton}>\n                        Clear\n                    </Button>\n                </Grid>\n                {query &&\n                    <Grid item xs={12}>\n                        <br />\n                        {loading &&\n                            <div className={classes.queryAnimation}>\n                                <Skeleton />\n                                <Skeleton animation={false} />\n                                <Skeleton animation=\"wave\" />\n                            </div>\n                        }\n                        {!loading && error &&\n                            <Alert severity=\"error\">\n                                <AlertTitle>{error.name}</AlertTitle>\n                                <strong>{error.message}</strong>\n                            </Alert>\n                        }\n                        {!loading && !error && <ResultTable result={result} query={query} />}\n                    </Grid>\n                }\n            </Grid>\n        </Container>\n    )\n}\n\n\nexport default QueryBuilder;","import { useState, useEffect } from 'react';\nimport { Button, Typography, AppBar, Card, CardActions, CardContent, CssBaseline, Grid, Toolbar, Container } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Search } from '@material-ui/icons';\n\nimport './App.css';\nimport theme from './theme';\nimport useStyles from './styles';\nimport { getHashParms } from './utils';\nimport sf from './services/salesforce'\nimport Authenticate from './components/Authenticate';\nimport QueryBuilder from './components/QueryBuilder';\n\nfunction App() {\n  const classes = useStyles();\n  const [isAuth, setIsAuth] = useState(false);\n\n  useEffect(() => {\n    let hashParms = getHashParms();\n    console.log(hashParms);\n    if (hashParms.access_token) {\n      sf.init(hashParms);\n      setIsAuth(true);\n      async function getInfo() {\n        await sf.getObjects();\n      }\n      getInfo();\n    }\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Search className={classes.logo} />\n          <Typography variant=\"h6\">Easy SOQL</Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        <div>\n          {!isAuth &&\n            <Authenticate></Authenticate>\n          }\n          {isAuth &&\n            <QueryBuilder></QueryBuilder>\n          }\n        </div>\n      </main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const getHashParms = () => {\n    let result = {};\n    let hash = window.location.hash;\n    if (hash && hash.length > 1) {\n        hash = hash.substr(1);\n        result = hash.split('&').reduce(function (res, item) {\n            var parts = item.split('=');\n            res[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n            return res;\n        }, {});\n    }\n    return result;\n}\n\nexport {\n    getHashParms,\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}